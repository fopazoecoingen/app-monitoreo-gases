// Script para enviar una medici√≥n espec√≠fica al laboratorio
const EmailSender = require('./src/utils/email-sender.js');
const DatabaseManager = require('./src/utils/database.js');

async function enviarMedicionAlLaboratorio() {
    console.log('üè≠ Enviando medici√≥n al laboratorio\n');

    // Configuraci√≥n
    const LAB_EMAIL = 'laboratorio@example.com'; // Cambiar por el email del laboratorio
    const INCLUIR_EXCEL = true;
    
    try {
        // 1. Inicializar servicios
        console.log('1Ô∏è‚É£ Inicializando servicios...');
        const emailSender = new EmailSender();
        const dbManager = new DatabaseManager();
        
        await dbManager.connect();
        await dbManager.initialize();
        console.log('‚úÖ Base de datos conectada');

        // 2. Obtener mediciones disponibles
        console.log('\n2Ô∏è‚É£ Obteniendo mediciones disponibles...');
        const readingsResult = await dbManager.getAllReadings();
        
        if (!readingsResult.success || readingsResult.data.length === 0) {
            console.log('‚ö†Ô∏è No se encontraron mediciones en la base de datos');
            
            // Crear medici√≥n de prueba
            console.log('üìù Creando medici√≥n de prueba...');
            const testData = {
                o2: 20.5,
                co: 15.2,
                ch4: 0.1
            };
            
            const saveResult = await dbManager.saveGasReading(testData, 'Prueba Laboratorio', 'Medici√≥n de prueba para env√≠o al laboratorio');
            
            if (saveResult.success) {
                console.log(`‚úÖ Medici√≥n de prueba creada con ID: ${saveResult.medicion_id}`);
                
                // Agregar lecturas detalladas de prueba
                for (let i = 0; i < 10; i++) {
                    await dbManager.saveDetailedReading(
                        saveResult.medicion_id,
                        {
                            o2: 20.5 + (Math.random() - 0.5) * 2,
                            co: 15.2 + (Math.random() - 0.5) * 5,
                            ch4: 0.1 + (Math.random() - 0.5) * 0.2
                        },
                        `${i * 30}s`,
                        'Normal'
                    );
                }
                
                console.log('‚úÖ Lecturas detalladas de prueba creadas');
                
                // Obtener mediciones nuevamente
                const newReadingsResult = await dbManager.getAllReadings();
                if (newReadingsResult.success && newReadingsResult.data.length > 0) {
                    readingsResult.data = newReadingsResult.data;
                }
            }
        }

        // 3. Mostrar mediciones disponibles
        console.log('\n3Ô∏è‚É£ Mediciones disponibles:');
        readingsResult.data.forEach((medicion, index) => {
            console.log(`   ${index + 1}. ID: ${medicion.medicion_id} - ${medicion.fecha} ${medicion.hora} - Evento: ${medicion.evento} - Lecturas: ${medicion.total_lecturas}`);
        });

        // 4. Seleccionar medici√≥n (por defecto la primera)
        const medicionId = readingsResult.data[0].medicion_id;
        console.log(`\n4Ô∏è‚É£ Enviando medici√≥n ID ${medicionId} al laboratorio...`);

        // 5. Verificar conexi√≥n a internet
        console.log('\n5Ô∏è‚É£ Verificando conexi√≥n a internet...');
        const InternetChecker = require('./src/utils/internet.js');
        const internetChecker = new InternetChecker();
        
        const connectionResult = await internetChecker.checkConnection();
        if (!connectionResult.connected) {
            console.log('‚ùå No hay conexi√≥n a internet. Abortando env√≠o.');
            return;
        }
        console.log(`‚úÖ Conexi√≥n a internet verificada (${connectionResult.latency}ms)`);

        // 6. Enviar medici√≥n al laboratorio
        console.log('\n6Ô∏è‚É£ Enviando medici√≥n al laboratorio...');
        const result = await emailSender.sendMeasurementReportWithAttachment(
            medicionId,
            LAB_EMAIL,
            INCLUIR_EXCEL ? 'excel' : null
        );

        if (result.success) {
            console.log('‚úÖ ¬°Medici√≥n enviada exitosamente al laboratorio!');
            console.log(`   üìß Email: ${LAB_EMAIL}`);
            console.log(`   üìä Medici√≥n ID: ${medicionId}`);
            console.log(`   üìé Excel adjunto: ${INCLUIR_EXCEL ? 'S√≠' : 'No'}`);
            console.log(`   üì¨ Message ID: ${result.messageId}`);
        } else {
            console.log(`‚ùå Error enviando medici√≥n: ${result.error}`);
        }

        // 7. Cerrar conexiones
        await dbManager.disconnect();
        console.log('\n‚úÖ Proceso completado');

    } catch (error) {
        console.error('‚ùå Error en el proceso:', error.message);
    }
}

// Funci√≥n para mostrar ayuda
function mostrarAyuda() {
    console.log('üìß Env√≠o de mediciones al laboratorio\n');
    console.log('Este script te permite enviar una medici√≥n espec√≠fica al laboratorio.');
    console.log('Incluye un archivo Excel con todos los datos de la medici√≥n.\n');
    
    console.log('üìã Pasos:');
    console.log('1. Configura tu email en email-config.json');
    console.log('2. Cambia LAB_EMAIL en este script por el email del laboratorio');
    console.log('3. Ejecuta: node enviar-medicion-lab.js\n');
    
    console.log('üîß Configuraci√≥n:');
    console.log('- LAB_EMAIL: Email del laboratorio');
    console.log('- INCLUIR_EXCEL: true/false para incluir archivo Excel');
    console.log('- Se env√≠a autom√°ticamente la primera medici√≥n disponible\n');
    
    console.log('üí° Si no hay mediciones, se crea una de prueba autom√°ticamente.');
}

// Ejecutar seg√∫n argumentos
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
    mostrarAyuda();
} else {
    enviarMedicionAlLaboratorio().catch(error => {
        console.error('‚ùå Error fatal:', error.message);
        process.exit(1);
    });
}
