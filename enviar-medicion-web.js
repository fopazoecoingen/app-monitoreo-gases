// Script para enviar una medici√≥n espec√≠fica a la plataforma web
const WebSender = require('./src/utils/web-sender.js');
const DatabaseManager = require('./src/utils/database.js');

async function enviarMedicionAPlataformaWeb() {
    console.log('üåê Enviando medici√≥n a plataforma web\n');

    try {
        // 1. Inicializar servicios
        console.log('1Ô∏è‚É£ Inicializando servicios...');
        const webSender = new WebSender();
        const dbManager = new DatabaseManager();
        
        await dbManager.connect();
        await dbManager.initialize();
        console.log('‚úÖ Base de datos conectada');

        // 2. Crear configuraci√≥n de ejemplo si no existe
        console.log('\n2Ô∏è‚É£ Verificando configuraci√≥n...');
        const configResult = await webSender.createExampleConfig();
        
        if (configResult.success) {
            console.log(`‚úÖ Archivo de configuraci√≥n creado: ${configResult.configPath}`);
            console.log('üìù Por favor, edita este archivo con la URL y API key de tu plataforma web\n');
            return;
        }

        // 3. Obtener mediciones disponibles
        console.log('\n3Ô∏è‚É£ Obteniendo mediciones disponibles...');
        const readingsResult = await dbManager.getAllReadings();
        
        if (!readingsResult.success || readingsResult.data.length === 0) {
            console.log('‚ö†Ô∏è No se encontraron mediciones en la base de datos');
            
            // Crear medici√≥n de prueba
            console.log('üìù Creando medici√≥n de prueba...');
            const testData = {
                o2: 20.5,
                co: 15.2,
                ch4: 0.1
            };
            
            const saveResult = await dbManager.saveGasReading(testData, 'Prueba Web', 'Medici√≥n de prueba para env√≠o a plataforma web');
            
            if (saveResult.success) {
                console.log(`‚úÖ Medici√≥n de prueba creada con ID: ${saveResult.medicion_id}`);
                
                // Agregar lecturas detalladas de prueba
                for (let i = 0; i < 10; i++) {
                    await dbManager.saveDetailedReading(
                        saveResult.medicion_id,
                        {
                            o2: 20.5 + (Math.random() - 0.5) * 2,
                            co: 15.2 + (Math.random() - 0.5) * 5,
                            ch4: 0.1 + (Math.random() - 0.5) * 0.2
                        },
                        `${i * 30}s`,
                        'Normal'
                    );
                }
                
                console.log('‚úÖ Lecturas detalladas de prueba creadas');
                
                // Obtener mediciones nuevamente
                const newReadingsResult = await dbManager.getAllReadings();
                if (newReadingsResult.success && newReadingsResult.data.length > 0) {
                    readingsResult.data = newReadingsResult.data;
                }
            }
        }

        // 4. Mostrar mediciones disponibles
        console.log('\n4Ô∏è‚É£ Mediciones disponibles:');
        readingsResult.data.forEach((medicion, index) => {
            console.log(`   ${index + 1}. ID: ${medicion.medicion_id} - ${medicion.fecha} ${medicion.hora} - Evento: ${medicion.evento} - Lecturas: ${medicion.total_lecturas}`);
        });

        // 5. Seleccionar medici√≥n (por defecto la primera)
        const medicionId = readingsResult.data[0].medicion_id;
        console.log(`\n5Ô∏è‚É£ Enviando medici√≥n ID ${medicionId} a plataforma web...`);

        // 6. Verificar conexi√≥n a internet
        console.log('\n6Ô∏è‚É£ Verificando conexi√≥n a internet...');
        const InternetChecker = require('./src/utils/internet.js');
        const internetChecker = new InternetChecker();
        
        const connectionResult = await internetChecker.checkConnection();
        if (!connectionResult.connected) {
            console.log('‚ùå No hay conexi√≥n a internet. Abortando env√≠o.');
            return;
        }
        console.log(`‚úÖ Conexi√≥n a internet verificada (${connectionResult.latency}ms)`);

        // 7. Enviar medici√≥n a plataforma web
        console.log('\n7Ô∏è‚É£ Enviando medici√≥n a plataforma web...');
        const result = await webSender.sendMeasurementToPlatform(medicionId);

        if (result.success) {
            console.log('‚úÖ ¬°Medici√≥n enviada exitosamente a plataforma web!');
            console.log(`   üìä Medici√≥n ID: ${result.measurementId}`);
            console.log(`   üåê Respuesta: ${JSON.stringify(result.response, null, 2)}`);
        } else {
            console.log(`‚ùå Error enviando medici√≥n: ${result.error}`);
            
            // Mostrar sugerencias para resolver el problema
            console.log('\nüí° Posibles soluciones:');
            console.log('   1. Verifica que la URL de la plataforma web sea correcta');
            console.log('   2. Comprueba que la API key sea v√°lida');
            console.log('   3. Aseg√∫rate de que la plataforma web est√© funcionando');
            console.log('   4. Verifica que el endpoint sea correcto');
        }

        // 8. Cerrar conexiones
        await dbManager.disconnect();
        console.log('\n‚úÖ Proceso completado');

    } catch (error) {
        console.error('‚ùå Error en el proceso:', error.message);
    }
}

// Funci√≥n para mostrar ayuda
function mostrarAyuda() {
    console.log('üåê Env√≠o de mediciones a plataforma web\n');
    console.log('Este script te permite enviar una medici√≥n espec√≠fica a tu plataforma web.');
    console.log('Los datos se env√≠an directamente v√≠a API REST.\n');
    
    console.log('üìã Pasos:');
    console.log('1. Ejecuta el script para crear el archivo de configuraci√≥n');
    console.log('2. Edita web-platform-config.json con tu informaci√≥n:');
    console.log('   - baseUrl: URL de tu plataforma web');
    console.log('   - apiKey: Tu clave API');
    console.log('   - endpoint: Endpoint para recibir mediciones');
    console.log('3. Ejecuta el script nuevamente para enviar la medici√≥n\n');
    
    console.log('üîß Configuraci√≥n de ejemplo:');
    console.log('{');
    console.log('  "baseUrl": "https://api.miplataforma.com",');
    console.log('  "apiKey": "tu-api-key-aqui",');
    console.log('  "endpoint": "/api/mediciones"');
    console.log('}\n');
    
    console.log('üí° Si no hay mediciones, se crea una de prueba autom√°ticamente.');
    console.log('üìä Los datos se env√≠an en formato JSON con toda la informaci√≥n de la medici√≥n.');
}

// Funci√≥n para probar la configuraci√≥n
async function probarConfiguracion() {
    console.log('üß™ Probando configuraci√≥n de plataforma web...\n');
    
    try {
        const webSender = new WebSender();
        
        // Crear configuraci√≥n de ejemplo
        const configResult = await webSender.createExampleConfig();
        if (configResult.success) {
            console.log(`‚úÖ Archivo de configuraci√≥n creado: ${configResult.configPath}`);
        }
        
        // Intentar cargar configuraci√≥n
        const loadResult = await webSender.webPlatformService.loadConfigFromFile(configResult.configPath);
        if (loadResult.success) {
            console.log('‚úÖ Configuraci√≥n cargada correctamente');
            
            // Verificar conexi√≥n
            const verifyResult = await webSender.webPlatformService.verifyConnection();
            if (verifyResult.success) {
                console.log('‚úÖ Conexi√≥n con plataforma web verificada');
            } else {
                console.log(`‚ö†Ô∏è No se pudo verificar conexi√≥n: ${verifyResult.error}`);
                console.log('üí° Esto es normal si la URL es de ejemplo');
            }
        } else {
            console.log(`‚ùå Error cargando configuraci√≥n: ${loadResult.error}`);
        }
        
    } catch (error) {
        console.error('‚ùå Error en la prueba:', error.message);
    }
}

// Ejecutar seg√∫n argumentos
const args = process.argv.slice(2);

if (args.includes('--help') || args.includes('-h')) {
    mostrarAyuda();
} else if (args.includes('--test-config')) {
    probarConfiguracion().catch(error => {
        console.error('‚ùå Error en la prueba:', error.message);
        process.exit(1);
    });
} else {
    enviarMedicionAPlataformaWeb().catch(error => {
        console.error('‚ùå Error fatal:', error.message);
        process.exit(1);
    });
}
